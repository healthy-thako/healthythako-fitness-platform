#!/usr/bin/env node

/**
 * Environment Setup Script for HealthyThako
 * This script helps set up environment variables for the project
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Environment variables configuration
const ENV_CONFIG = {
  // Client-side environment variables (prefixed with VITE_)
  client: {
    VITE_SUPABASE_URL: 'https://lhncpcsniuxnrmabbkmr.supabase.co',
    VITE_SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxobmNwY3NuaXV4bnJtYWJia21yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA5NzI4NzQsImV4cCI6MjA2NjU0ODg3NH0.Hs6IQZS8Hs6IQZS8Hs6IQZS8Hs6IQZS8Hs6IQZS8Hs6IQZS8',
    VITE_UDDOKTAPAY_API_KEY: 'yrnDmmCuY0uiPU7rgoBGsWYbx97tJxNFpapmKwXYU',
    VITE_UDDOKTAPAY_BASE_URL: 'https://digitaldot.paymently.io/api',
    VITE_UDDOKTAPAY_ENVIRONMENT: 'production',
    VITE_APP_NAME: 'HealthyThako',
    VITE_APP_URL: 'http://localhost:8080',
    VITE_APP_ENVIRONMENT: 'development',
    VITE_PAYMENT_CURRENCY: 'BDT',
    VITE_PAYMENT_SUCCESS_URL: '/payment-success',
    VITE_PAYMENT_CANCEL_URL: '/payment-cancelled',
    VITE_PLATFORM_COMMISSION: '0.1',
    VITE_DEFAULT_TRAINER_RATE: '1200',
    VITE_DEFAULT_GYM_MONTHLY_RATE: '2000',
    VITE_ENABLE_REAL_TIME: 'false',
    VITE_ENABLE_NOTIFICATIONS: 'true',
    VITE_ENABLE_ANALYTICS: 'true',
    VITE_ENABLE_DEBUG_LOGS: 'true',
    VITE_MOBILE_APP_SCHEME: 'healthythako',
    VITE_MOBILE_DEEP_LINK_SUCCESS: 'healthythako://payment/success',
    VITE_MOBILE_DEEP_LINK_CANCEL: 'healthythako://payment/cancelled',
  },
  
  // Server-side environment variables (for Edge Functions)
  server: {
    UDDOKTAPAY_API_KEY: 'yrnDmmCuY0uiPU7rgoBGsWYbx97tJxNFpapmKwXYU',
    SUPABASE_URL: 'https://lhncpcsniuxnrmabbkmr.supabase.co',
    SUPABASE_SERVICE_ROLE_KEY: 'YOUR_SERVICE_ROLE_KEY_HERE', // This needs to be set manually
  }
};

function createEnvFile() {
  const envPath = path.join(path.dirname(__dirname), '.env');
  
  console.log('üîß Creating .env file...');
  
  let envContent = '# HealthyThako Environment Configuration\n';
  envContent += '# Generated by setup-env.js\n\n';
  
  // Add client-side variables
  envContent += '# Client-side Environment Variables\n';
  for (const [key, value] of Object.entries(ENV_CONFIG.client)) {
    envContent += `${key}=${value}\n`;
  }
  
  envContent += '\n# Server-side Environment Variables (for Edge Functions)\n';
  for (const [key, value] of Object.entries(ENV_CONFIG.server)) {
    envContent += `${key}=${value}\n`;
  }
  
  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ .env file created successfully!');
}

function createEnvExample() {
  const envExamplePath = path.join(path.dirname(__dirname), '.env.example');
  
  console.log('üîß Creating .env.example file...');
  
  let envContent = '# HealthyThako Environment Configuration Example\n';
  envContent += '# Copy this file to .env and update the values\n\n';
  
  // Add client-side variables with placeholder values
  envContent += '# Client-side Environment Variables\n';
  for (const [key, value] of Object.entries(ENV_CONFIG.client)) {
    if (key.includes('API_KEY') || key.includes('SECRET')) {
      envContent += `${key}=your_${key.toLowerCase()}_here\n`;
    } else {
      envContent += `${key}=${value}\n`;
    }
  }
  
  envContent += '\n# Server-side Environment Variables (for Edge Functions)\n';
  for (const [key, value] of Object.entries(ENV_CONFIG.server)) {
    if (key.includes('API_KEY') || key.includes('SECRET') || key.includes('SERVICE_ROLE')) {
      envContent += `${key}=your_${key.toLowerCase()}_here\n`;
    } else {
      envContent += `${key}=${value}\n`;
    }
  }
  
  fs.writeFileSync(envExamplePath, envContent);
  console.log('‚úÖ .env.example file created successfully!');
}

function validateEnvironment() {
  console.log('üîç Validating environment configuration...');
  
  const requiredVars = [
    'VITE_SUPABASE_URL',
    'VITE_SUPABASE_ANON_KEY',
    'VITE_UDDOKTAPAY_API_KEY',
  ];
  
  const missing = [];
  
  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      missing.push(varName);
    }
  }
  
  if (missing.length > 0) {
    console.log('‚ùå Missing required environment variables:');
    missing.forEach(varName => console.log(`   - ${varName}`));
    return false;
  }
  
  console.log('‚úÖ All required environment variables are set!');
  return true;
}

function generateSupabaseEnvCommands() {
  console.log('\nüìã Supabase Edge Function Environment Variables:');
  console.log('Run these commands in your Supabase project dashboard or CLI:\n');
  
  for (const [key, value] of Object.entries(ENV_CONFIG.server)) {
    if (key !== 'SUPABASE_SERVICE_ROLE_KEY') {
      console.log(`supabase secrets set ${key}="${value}"`);
    }
  }
  
  console.log('\n‚ö†Ô∏è  Note: Set SUPABASE_SERVICE_ROLE_KEY manually in Supabase dashboard');
  console.log('   Go to: Project Settings ‚Üí API ‚Üí service_role key');
}

function printUsageInstructions() {
  console.log('\nüìñ Usage Instructions:');
  console.log('1. Run this script to generate .env files');
  console.log('2. Update any placeholder values in .env');
  console.log('3. Set environment variables in Supabase dashboard');
  console.log('4. Deploy Edge Functions with: npm run deploy:functions');
  console.log('5. Test payment integration at: /payment-test');
  
  console.log('\nüîó Useful Links:');
  console.log('- Supabase Dashboard: https://supabase.com/dashboard');
  console.log('- UddoktaPay Docs: https://uddoktapay.readme.io/reference/api-information');
  console.log('- Project URL: http://localhost:8080');
}

// Main execution
function main() {
  console.log('üöÄ HealthyThako Environment Setup\n');
  
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    printUsageInstructions();
    return;
  }
  
  if (args.includes('--validate')) {
    validateEnvironment();
    return;
  }
  
  if (args.includes('--supabase-commands')) {
    generateSupabaseEnvCommands();
    return;
  }
  
  // Default: create env files
  createEnvFile();
  createEnvExample();
  generateSupabaseEnvCommands();
  printUsageInstructions();
}

// Run main function
main();

export {
  ENV_CONFIG,
  createEnvFile,
  createEnvExample,
  validateEnvironment,
  generateSupabaseEnvCommands
};
